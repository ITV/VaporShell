[CmdletBinding()]
Param(
    [Parameter(Position = 0)]
    [ValidateSet('BuildCoreOnly','BuildClasses','TestClasses')]
    [string[]]
    $Task = @('BuildCoreOnly','TestClasses')
)

$BuildRoot = $PSScriptRoot
$buildOutputPath = [System.IO.Path]::Combine($BuildRoot,'BuildOutput')

if (($env:PSModulePath -split ';') -notcontains $buildOutputPath) {
    $env:PSModulePath = @($buildOutputPath, $env:PSModulePath) -join [System.IO.Path]::PathSeparator
}


<# if ($Function:prompt.ToString() -notmatch 'VS CLASS DBG') {
    $env:VSClassDebugLevel = 1
}
else {
    $env:VSClassDebugLevel = ([int]$env:VSClassDebugLevel) + 1
}
$command = "function prompt {`"`"[VS CLASS DBG #$env:VSClassDebugLevel] `$(`$PWD.Path)> `"`"};. '$($PSScriptRoot)/build.ps1' -Task $($Task -join ',');Get-ChildItem '$($PSScriptRoot)/BuildOutput' -Recurse -Include '*.Attributes.ps1','*.Classes.ps1' | ForEach-Object {. `$_.FullName}"
pwsh -NoExit -NoProfile -Command $command #>

try {
    Import-Module "$buildOutputPath/VaporShell"
    Get-ChildItem $buildOutputPath -Directory -Exclude 'VaporShell','_autoGenerated' | ForEach-Object {
        Import-Module $_.FullName
    }
    Write-Host -ForegroundColor Green "Module imported, creating templates..."

    $stack = [VSTemplate]@{
        Parameters = @(
            [VSParameter]@{
                LogicalId = 'MinSize'
                Type = 'Number'
            }
            [VSParameter]@{
                LogicalId = 'MaxSize'
                Type = 'Number'
            }
            [VSParameter]@{
                LogicalId = 'DesiredSize'
                Type = 'Number'
            }
            [VSParameter]@{
                LogicalId = 'ImageId'
                Type = 'AWS::EC2::Image::Id'
            }
            [VSParameter]@{
                LogicalId = 'InstanceType'
                Type = 'String'
            }
            [VSParameter]@{
                LogicalId = 'KeyName'
                Type = 'String'
            }
            [VSParameter]@{
                LogicalId = 'SSLCertificateArn'
                Type = 'String'
            }
            [VSParameter]@{
                LogicalId = 'PrivateSubnets'
                Type = 'List<AWS::EC2::Subnet::Id>'
            }
            [VSParameter]@{
                LogicalId = 'PublicSubnets'
                Type = 'List<AWS::EC2::Subnet::Id>'
            }
            [VSParameter]@{
                LogicalId = 'ASGSecurityGroups'
                Type = 'List<AWS::EC2::SecurityGroup::Id>'
            }
            [VSParameter]@{
                LogicalId = 'BastionSecurityGroups'
                Type = 'List<AWS::EC2::SecurityGroup::Id>'
            }
            [VSParameter]@{
                LogicalId = 'LoadBalancerSecurityGroups'
                Type = 'List<AWS::EC2::SecurityGroup::Id>'
            }
        )
        Conditions = @(
            [VSCondition]@{
                LogicalId = 'HasSSL'
                Condition = [ConNot]::new([ConEquals]([FnRef]'SSLCertificateArn',''))
            }
            [VSCondition]@{
                LogicalId = 'HasSSHKey'
                Condition = [ConNot]::new([ConEquals]([FnRef]'KeyName',''))
            }
        )
        Resources = @(
            [ElasticLoadBalancingLoadBalancer]@{
                LogicalId = 'LoadBalancer'
                Subnets = [FnRef]'PublicSubnets'
                SecurityGroups = [FnRef]'LoadBalancerSecurityGroups'
                Listeners = @(
                    [ElasticLoadBalancingLoadBalancerListeners]@{
                        LoadBalancerPort = '80'
                        InstancePort = '80'
                        Protocol = 'HTTP'
                    }
                    [ConIf]::new(
                        'HasSSL',
                        [ElasticLoadBalancingLoadBalancerListeners]@{
                            LoadBalancerPort = '443'
                            InstancePort = '443'
                            Protocol = 'HTTPS'
                            SSLCertificateId = [FnRef]'SSLCertificateArn'
                        },
                        [FnRef][VSAWS]::NoValue
                    )
                )
                HealthCheck = [ElasticLoadBalancingLoadBalancerHealthCheck]@{
                    Target = 'HTTP:80/'
                    HealthyThreshold = '3'
                    UnhealthyThreshold = '5'
                    Interval = '30'
                    Timeout = '5'
                }
            }
            [AutoScalingLaunchConfiguration]@{
                LogicalId = 'WebServerLaunchConfig'
                KeyName = [ConIf]::new(
                    'HasSSHKey',
                    [FnRef]'KeyName',
                    [FnRef][VSAWS]::NoValue
                )
                ImageId = [FnRef]'ImageId'
                UserData = (
                    '#!/bin/bash',
                    'yum install -y nginx',
                    'service nginx start'
                )
                SecurityGroups = [FnRef]'ASGSecurityGroups'
                InstanceType = [FnRef]'InstanceType'
            }
            [EC2Instance]@{
                LogicalId = 'Bastion'
                Condition = 'HasSSHKey'
                ImageId = [FnRef]'ImageId'
                InstanceType = 't2.micro'
                NetworkInterfaces = @(
                    [EC2InstanceNetworkInterface]@{
                        AssociatePublicIpAddress = $true
                        DeviceIndex = '0'
                        GroupSet = [FnRef]'BastionSecurityGroups'
                        SubnetId = [FnSelect]::new(0, [FnRef]'PublicSubnets')
                    }
                )
            }
        )
    }

    "`n`n~~~~~~~~~~~~~~~~~~~~~ `$stack.ToJson() ~~~~~~~~~~~~~~~~~~~~~`n"
    $stack.ToJson()

    "`n`n~~~~~~~~~~~~~~~~~~~~~ `$stack.ToYaml() ~~~~~~~~~~~~~~~~~~~~~`n"
    $stack.ToYaml()
}
catch {
    $_
}
