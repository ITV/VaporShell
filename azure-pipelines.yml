resources:
- repo: self
  clean: true

trigger:
  branches:
    include:
    - master
    - "*"
    exclude:
    - refs/tag/*

jobs:
- job: Compile
  displayName: Compile Module
  pool:
    vmImage: 'windows-2019'
  steps:
  - powershell: . ./build.ps1 -Task @('Update','Compile','Import')
    displayName: Compile PowerShell Module
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Compiled Module'
    inputs:
      PathtoPublish: BuildOutput
      ArtifactName: BuildOutput

- job: PS5Test
  displayName: Run Tests (PowerShell v5)
  dependsOn: Compile
  condition: succeeded()
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: BuildOutput
      downloadPath: '$(Build.SourcesDirectory)'
  - powershell: . ./build.ps1 -Task PesterOnly
    displayName: Test Module
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()

- job: PS6UbuTest
  displayName: Run Tests (PowerShell Core - Linux)
  dependsOn: Compile
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: BuildOutput
      downloadPath: '$(Build.SourcesDirectory)'
  - powershell: . ./build.ps1 -Task PesterOnly
    displayName: Test Module
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()

- job: PS6MacTest
  displayName: Run Tests (PowerShell Core - macOS)
  dependsOn: Compile
  condition: succeeded()
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: BuildOutput
      downloadPath: '$(Build.SourcesDirectory)'
  - powershell: . ./build.ps1 -Task PesterOnly
    displayName: Test Module
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()

- job: PS6WinTest
  displayName: Run Tests (PowerShell Core - Windows)
  dependsOn: Compile
  condition: succeeded()
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: BuildOutput
      downloadPath: '$(Build.SourcesDirectory)'
  - powershell: |
      $Env:Path = [Environment]::GetEnvironmentVariable('Path',[EnvironmentVariableTarget]::Machine)
      pwsh -command ". ./build.ps1 -Task PesterOnly"
    displayName: Test Module
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()

- job: Deploy
  displayName: Deploy Module
  dependsOn:
    - Compile
    - PS5Test
    - PS6UbuTest
    - PS6MacTest
    - PS6WinTest
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: BuildOutput
      downloadPath: '$(Build.SourcesDirectory)'
  - powershell: |
      $Env:GitHubPAT = '$(GitHub.PAT)'
      $Env:NuGetApiKey = '$(NuGetApiKey)'
      $Env:TwitterAccessSecret = '$(Twitter.AccessSecret)'
      $Env:TwitterAccessToken = '$(Twitter.AccessToken)'
      $Env:TwitterConsumerKey = '$(Twitter.ConsumerKey)'
      $Env:TwitterConsumerSecret = '$(Twitter.ConsumerSecret)'
      . ./build.ps1 -Task Deploy
    displayName: Deploy to PowerShell Gallery
